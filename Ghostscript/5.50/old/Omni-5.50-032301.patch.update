diff -C 5 gs5.50/gomni.c gs5.51/gomni.c
*** gs5.50/gomni.c	Fri Mar 23 15:41:22 2001
--- gs5.51/gomni.c	Fri Mar 23 15:43:29 2001
***************
*** 240,249 ****
--- 240,251 ----
     PFNENDJOB             pfnEndJob;
     PFNRASTERIZE          pfnRasterize;
     PFNCREATEDEVICE       pfnCreateDevice;
     PFNDELETEDEVICE       pfnDeleteDevice;
  
+    unsigned long         ulPelSizeCorrection;
+ 
     int                   iVertDots;
     int                   width;
     int                   height;
  
     byte                 *outbuf;     /* Output-Buffer */
***************
*** 338,348 ****
  
     if (pDev->pszOtherOptions)
     {
         gs_free(pDev->pszOtherOptions,strlen(pDev->pszOtherOptions)+1, 1, "Option String");
     }
!     
     return gdev_prn_close (pdev);
  }
  
  /* -------------- Renderer instance procedures ----------*/
  
--- 340,350 ----
  
     if (pDev->pszOtherOptions)
     {
         gs_free(pDev->pszOtherOptions,strlen(pDev->pszOtherOptions)+1, 1, "Option String");
     }
! 
     return gdev_prn_close (pdev);
  }
  
  /* -------------- Renderer instance procedures ----------*/
  
***************
*** 488,513 ****
              pbmi->argbColor[0].bGreen = 0xFF;
              pbmi->argbColor[1].bBlue  = 0x00;   // foreground
              pbmi->argbColor[1].bRed   = 0x00;
              pbmi->argbColor[1].bGreen = 0x00;
  
!             ImageInfo.pptlSrc = &ptlBounds;    // rectangle extents
!             ImageInfo.pptlDst = &ptlTrgBounds;    // rectangle extents
!             ImageInfo.ulSrcBpp     = 24;
!             ImageInfo.ulSrcBytesPerLine = uiBytesPerLine;   // src bytes per line
!             ImageInfo.ulcSrcClrs   = 0;
!             ImageInfo.ulSrcClrType = 0;
!             ImageInfo.pargb2Src    = 0;         // if srcBPP != 24
!             ImageInfo.ulTrgBpp     = 1;
!             ImageInfo.ulTrgBytesPerLine = pasyncDev->width + (-pasyncDev->width & 31);
!             ImageInfo.ulTrgBytesPerLine /= 8;
!             ImageInfo.ulcTrgClrs   = 2;
!             ImageInfo.ulTrgClrType = 0;
!             ImageInfo.pargb2Trg    = NULL;
!             ImageInfo.ulOptions    = 0;            // options
! //          ImageInfo.ulPelSizeCorrection  = 300;  //@@10192000
!             ImageInfo.ulPelSizeCorrection  = 100;   //@@10192000
  
              ptlBounds.x = pasyncDev->width;             // Bounding rectangle for input bitmap
              ptlTrgBounds.x = pasyncDev->width;          // Bounding rectangle for output bitmap
  
  
--- 490,514 ----
              pbmi->argbColor[0].bGreen = 0xFF;
              pbmi->argbColor[1].bBlue  = 0x00;   // foreground
              pbmi->argbColor[1].bRed   = 0x00;
              pbmi->argbColor[1].bGreen = 0x00;
  
!             ImageInfo.pptlSrc             = &ptlBounds;    // rectangle extents
!             ImageInfo.pptlDst             = &ptlTrgBounds;    // rectangle extents
!             ImageInfo.ulSrcBpp            = 24;
!             ImageInfo.ulSrcBytesPerLine   = uiBytesPerLine;   // src bytes per line
!             ImageInfo.ulcSrcClrs          = 0;
!             ImageInfo.ulSrcClrType        = 0;
!             ImageInfo.pargb2Src           = 0;         // if srcBPP != 24
!             ImageInfo.ulTrgBpp            = 1;
!             ImageInfo.ulTrgBytesPerLine   = pasyncDev->width + (-pasyncDev->width & 31);
!             ImageInfo.ulTrgBytesPerLine  /= 8;
!             ImageInfo.ulcTrgClrs          = 2;
!             ImageInfo.ulTrgClrType        = 0;
!             ImageInfo.pargb2Trg           = NULL;
!             ImageInfo.ulOptions           = 0;            // options
!             ImageInfo.ulPelSizeCorrection = pDev->ulPelSizeCorrection;
  
              ptlBounds.x = pasyncDev->width;             // Bounding rectangle for input bitmap
              ptlTrgBounds.x = pasyncDev->width;          // Bounding rectangle for output bitmap
  
  
***************
*** 524,534 ****
  
      pbmi->cx = pgx_prt_dev->width;
  
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
!     if (fDebugOutput) fprintf(stderr, "ulTrgBytesPerLine = %d \n",ImageInfo.ulTrgBytesPerLine );
      if (fDebugOutput) fprintf(stderr, "ulBytesPerLine = %d \n",uiBytesPerLine );
      if (fDebugOutput) fprintf(stderr, "ulLineSize = %d \n",uiLineSize );
      if (fDebugOutput) fprintf(stderr, "         width = %d \n  height = %d \n", pgx_prt_dev->width, pgx_prt_dev->height);
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
--- 525,535 ----
  
      pbmi->cx = pgx_prt_dev->width;
  
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
!     if (fDebugOutput) fprintf(stderr, "ulTrgBytesPerLine = %ld \n",ImageInfo.ulTrgBytesPerLine );
      if (fDebugOutput) fprintf(stderr, "ulBytesPerLine = %d \n",uiBytesPerLine );
      if (fDebugOutput) fprintf(stderr, "ulLineSize = %d \n",uiLineSize );
      if (fDebugOutput) fprintf(stderr, "         width = %d \n  height = %d \n", pgx_prt_dev->width, pgx_prt_dev->height);
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
      if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
***************
*** 709,720 ****
                fprintf(stderr, "rendering band lines %d - %d w/%d \n", (int)rectPageLocation.yTop, (int)rectPageLocation.yBottom, iYBand);
  
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
                if (fDebugOutput) fprintf(stderr, "Number of lines in band = %d\n", iYBand);
!               if (fDebugOutput) fprintf(stderr, "rectPageLocation - Top = %d\n", rectPageLocation.yTop);
!               if (fDebugOutput) fprintf(stderr, "rectPageLocation - Bot = %d\n", rectPageLocation.yBottom);
  
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
  
                pDev->pfnRasterize (pasyncDev->pDev->pDevice,
--- 710,721 ----
                fprintf(stderr, "rendering band lines %d - %d w/%d \n", (int)rectPageLocation.yTop, (int)rectPageLocation.yBottom, iYBand);
  
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
                if (fDebugOutput) fprintf(stderr, "Number of lines in band = %d\n", iYBand);
!               if (fDebugOutput) fprintf(stderr, "rectPageLocation - Top = %ld\n", rectPageLocation.yTop);
!               if (fDebugOutput) fprintf(stderr, "rectPageLocation - Bot = %ld\n", rectPageLocation.yBottom);
  
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
                if (fDebugOutput) fprintf(stderr, "***************************************************************\n");
  
                pDev->pfnRasterize (pasyncDev->pDev->pDevice,
***************
*** 1018,1044 ****
      max(render_space, writer_space) + tile_cache_space;
      space_params->BufferSpace =
      max(render_space, writer_space + min_row_space) + tile_cache_space;
  }
  
- /* Map a r-g-b color to a color index for 8 bit support */
- gx_color_index
- bmp_map_rgb_color(gx_device * dev, gx_color_value r, gx_color_value g,
- 		  gx_color_value b)
- {
-     return (pc_8bit_map_rgb_color(dev, r, g,  b));
- }
- 
- /* Map a color index to a r-g-b color. */
- int
- bmp_map_color_rgb(gx_device * dev, gx_color_index color,
- 		  gx_color_value prgb[3])
- {
-     return (pc_8bit_map_color_rgb(dev, color, prgb));
- }
- 
- 
  /*****************************************************************************/
  /*                                                                           */
  /*  FUNCTION: SetupDevice                                                    */
  /*                                                                           */
  /*  We need to set up our device and job specific information here           */
--- 1019,1028 ----
***************
*** 1087,1096 ****
--- 1071,1082 ----
         }
     }
  
     if (!pDev->vhOmni)
     {
+       pDev->ulPelSizeCorrection = 100;
+ 
        pDev->vhOmni = dlopen ("libomni.so", RTLD_NOW | RTLD_GLOBAL);
  
        if (!pDev->vhOmni)
        {
           // Failure!
***************
*** 1190,1202 ****
            memcpy ( pDev->cDebugFile, fname.data, fname.size );
            pDev->cDebugFile[fname.size] = '\0';
        }
     }
  
!       /*
!        *  Set user options for the job
!        */
  
     fname = deffname;
     iReturnCode = param_read_string(plist,"properties",&fname);
     if(0 > iReturnCode)
     {
--- 1176,1199 ----
            memcpy ( pDev->cDebugFile, fname.data, fname.size );
            pDev->cDebugFile[fname.size] = '\0';
        }
     }
  
!    iReturnCode = param_read_long(plist,"PelSizeCorrection",&pDev->ulPelSizeCorrection);
!    if(0 > iReturnCode)
!    {
!       if(iReturnCode < 0)
!       {
!           iReturnCode = param_read_null(plist,"PelSizeCorrection");
!           if(iReturnCode != 0)
!             fprintf(stderr, "Error Reading PelSizeCorrection parameter\n");
!       }
!    }
! 
!    /*
!     *  Set user options for the job
!     */
  
     fname = deffname;
     iReturnCode = param_read_string(plist,"properties",&fname);
     if(0 > iReturnCode)
     {
***************
*** 1216,1247 ****
             memcpy ( pDev->pszOtherOptions, fname.data, fname.size );
             pDev->pszOtherOptions[fname.size] = '\0';
         }
     }
  
- // allow the use of 8 bit color coming through gomni
- #if 0
- 
-    set_dev_proc(pgxdev, map_rgb_color, bmp_map_rgb_color);
-    set_dev_proc(pgxdev, map_color_rgb, bmp_map_color_rgb);
- 
- #endif 
  
     if(pDev->iSetup != 1)
     {
!           // create a device based on the user supplied inputs
!           // To-Do - free the device
  
!           if (fDebugOutput) fprintf(stderr,"setting following options on CreateDevice\n");
!           if (fDebugOutput) fprintf(stderr,"DeviceName= %s\n", pDev->cDeviceName );
!           if (fDebugOutput) fprintf(stderr,"%s\n", pDev->pszOtherOptions);
!           if (fDebugOutput) fprintf(stderr,"debug parameter = %s \n", pDev->cDebugFile );
!           /*
!            *  Create a device definition by using the input parameters as the
!            *  the defining factors
!            */
  
  
        if (!pDev->cDeviceName[0])
        {
            bRet = gdev_prn_put_params ((gx_device *)prgxdev, plist);
            return bRet;
--- 1213,1237 ----
             memcpy ( pDev->pszOtherOptions, fname.data, fname.size );
             pDev->pszOtherOptions[fname.size] = '\0';
         }
     }
  
  
     if(pDev->iSetup != 1)
     {
!       // create a device based on the user supplied inputs
!       // To-Do - free the device
  
!       if (fDebugOutput) fprintf(stderr,"setting following options on CreateDevice\n");
!       if (fDebugOutput) fprintf(stderr,"DeviceName= %s\n", pDev->cDeviceName );
!       if (fDebugOutput) fprintf(stderr,"%s\n", pDev->pszOtherOptions);
!       if (fDebugOutput) fprintf(stderr,"debug parameter = %s \n", pDev->cDebugFile );
  
+       /*
+        *  Create a device definition by using the input parameters as the
+        *  the defining factors
+        */
  
        if (!pDev->cDeviceName[0])
        {
            bRet = gdev_prn_put_params ((gx_device *)prgxdev, plist);
            return bRet;
***************
*** 1278,1290 ****
  
        // get the hardware page margins information
  
        bRet = pDev->pfnGetMarginInfo (pDev->pDevice, &hwMargins);
  
- 
-       if (fDebugOutput) fprintf (stderr, "bRet from Get Margin info = %d \n", bRet);
- 
        if(!bRet)
            return -1;
  
        /*
         *  We have to let GS know about our page and resolution parameters
--- 1268,1277 ----
***************
*** 1314,1342 ****
  
        // set y resolution
        prgxdev->HWResolution[1] = (float) hwRes.yRes;
  
        prgxdev->pDev->iVertDots = (float) hwRes.fScanDots;  // fill in the scan line
!                                                            // column size
! 
! 
!       if (fDebugOutput) fprintf (stderr, "LeftClip   = %f \n", hwMargins.fLeftClip);
!       if (fDebugOutput) fprintf (stderr, "BottomClip = %f \n", hwMargins.fBottomClip);
!       if (fDebugOutput) fprintf (stderr, "RightClip  = %f \n", hwMargins.fRightClip);
!       if (fDebugOutput) fprintf (stderr, "TopClip    = %f \n", hwMargins.fTopClip);
!       if (fDebugOutput) fprintf (stderr, "LeftMar    = %f \n", prgxdev->HWMargins[0]);
!       if (fDebugOutput) fprintf (stderr, "BotMar     = %f \n", prgxdev->HWMargins[1]);
!       if (fDebugOutput) fprintf (stderr, "RightMar   = %f \n", prgxdev->HWMargins[2]);
!       if (fDebugOutput) fprintf (stderr, "TopMar     = %f \n", prgxdev->HWMargins[3]);
!       if (fDebugOutput) fprintf (stderr, "Width      = %f \n", hwMargins.fxWidth);
!       if (fDebugOutput) fprintf (stderr, "Height     = %f \n", hwMargins.fyHeight);
!    }                                                            
! 
  
     iReturnCode = gdev_prn_put_params((gx_device *)prgxdev, plist);
-    return iReturnCode;  // likely not be a failure
  
  }
  
  /* -------------------------------------------------------------------------*/
  /*                                                                          */
  /*  Function: GetDeviceParams                                               */
--- 1301,1315 ----
  
        // set y resolution
        prgxdev->HWResolution[1] = (float) hwRes.yRes;
  
        prgxdev->pDev->iVertDots = (float) hwRes.fScanDots;  // fill in the scan line
!    }                                                            // column size
  
     iReturnCode = gdev_prn_put_params((gx_device *)prgxdev, plist);
  
+    return iReturnCode;  // likely not be a failure
  }
  
  /* -------------------------------------------------------------------------*/
  /*                                                                          */
  /*  Function: GetDeviceParams                                               */
***************
*** 1349,1375 ****
  
  private int
  GetDeviceParams(gx_device *pgxdev, gs_param_list *plist)
  {
     omni_device *const      odev       = (omni_device *) pgxdev;
!    pDevStruct              pDev        = odev->pDev;
  
     int iReturnCode = 0;
     gs_param_string    strdata;
  
!    const char   *pszDeviceName = "";
!    const char   *pszDebug      = "";
!    const char   *pszOther      = "";
!    bool          bPersist = false;
  
     iReturnCode = gdev_prn_get_params ( pgxdev, plist );
     if (pDev)
     {
!        bPersist = true;
!        pszDeviceName  = pDev->cDeviceName;
!        pszDebug       = pDev->cDebugFile;
!        pszOther       = pDev->pszOtherOptions;
  
         // Return if we already did our work here
         if(strlen(pszDeviceName) > 0)
             return iReturnCode;
     }
--- 1322,1350 ----
  
  private int
  GetDeviceParams(gx_device *pgxdev, gs_param_list *plist)
  {
     omni_device *const      odev       = (omni_device *) pgxdev;
!    pDevStruct              pDev       = odev->pDev;
  
     int iReturnCode = 0;
     gs_param_string    strdata;
  
!    const char   *pszDeviceName       = "";
!    const char   *pszDebug            = "";
!    const char   *pszOther            = "";
!    unsigned long ulPelSizeCorrection = 100;
!    bool          bPersist            = false;
  
     iReturnCode = gdev_prn_get_params ( pgxdev, plist );
     if (pDev)
     {
!        bPersist            = true;
!        pszDeviceName       = pDev->cDeviceName;
!        pszDebug            = pDev->cDebugFile;
!        pszOther            = pDev->pszOtherOptions;
!        ulPelSizeCorrection = pDev->ulPelSizeCorrection;
  
         // Return if we already did our work here
         if(strlen(pszDeviceName) > 0)
             return iReturnCode;
     }
***************
*** 1385,1394 ****
--- 1360,1371 ----
  
     strdata.data = pszOther;
     strdata.size = strlen(pszOther);
     strdata.persistent = bPersist;
     iReturnCode = param_write_string(plist,"properties",&strdata);
+ 
+    iReturnCode = param_write_long(plist,"PelSizeCorrection",&ulPelSizeCorrection);
  
     return iReturnCode;
  }
  
  
