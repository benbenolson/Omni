diff -ur ghostscript-7.04-030402/src/gomni.c ghostscript-7.04-041602/src/gomni.c
--- ghostscript-7.04-030402/src/gomni.c	Tue Apr 16 15:43:48 2002
+++ ghostscript-7.04-041602/src/gomni.c	Tue Apr 16 15:43:49 2002
@@ -463,7 +463,7 @@
 
    if (pDev->pcoreOmni->pszJobOptions)
    {
-      gs_free (pDev->pcoreOmni->pszJobOptions,strlen(pDev->pcoreOmni->pszJobOptions)+1, 1, "Option String");
+      gs_free (pDev->pcoreOmni->pszJobOptions, strlen (pDev->pcoreOmni->pszJobOptions) + 1, 1, "Option String");
    }
 
    if (pDev->pfnGITerm)
@@ -554,7 +554,7 @@
       && pDev->pcoreOmni->pszJobOptions
       )
    {
-      strdata.size = strlen(pszOther);
+      strdata.size = strlen (pszOther);
       strdata.data = pszOther;
    }
    else
@@ -634,6 +634,8 @@
    deffname.size       = 0;
    deffname.persistent = false;
 
+   if (fDebugOutput) fprintf (stderr, "SetupDevice: pDev = %08X\n", pDev);
+
    if (pDev == NULL)
    {
       PDEVSTRUCT p;
@@ -641,15 +643,16 @@
       p = (PDEVSTRUCT)gs_malloc (1, sizeof (Omni_Dev), "omni/instance");
       if (!p)
       {
-          fprintf(stderr, "<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n");
-          fprintf(stderr, "   Failed allocation of p in SetupDevice\n");
-          return_error(gs_error_VMerror);
+          fprintf (stderr, "<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n");
+          fprintf (stderr, "   Failed allocation of p in SetupDevice\n");
+
+          return_error (gs_error_VMerror);
       }
       prgxdev->pDev = p;
 
       if (!(pDev = prgxdev->pDev))
       {
-         return_error(gs_error_Fatal);
+         return_error (gs_error_Fatal);
       }
       else
       {
@@ -684,7 +687,7 @@
               sprintf (pszDeviceLib, "%s%s", apszLibraryPaths[i], cOmnilib);
               pDev->hmodOmni = g_module_open (pszDeviceLib, (GModuleFlags)0);
           }
-          gs_free (pszDeviceLib,strlen(pszDeviceLib)+1, 1, "Devicestring");
+          gs_free (pszDeviceLib, strlen (pszDeviceLib) + 1, 1, "Devicestring");
       }
 
       if (!pDev->hmodOmni)
@@ -791,16 +794,14 @@
    // device name in structure - need to fail if none
    fname = deffname;
    iReturnCode = param_read_string (plist, "DeviceName", &fname);
-   if (0 > iReturnCode)
+   if (fDebugOutput) fprintf (stderr,"param_read_string of DeviceName = %d\n", iReturnCode);
+   if (  0 < iReturnCode
+      && !pDev->pcoreOmni->cDeviceName[0]
+      )
    {
-      pDev->pcoreOmni->cDeviceName[0] = '\0';
+      fprintf (stderr, "Error: -sDeviceName=XXX must be on the command line!\n");
 
-      if (iReturnCode < 0)
-      {
-         iReturnCode = param_read_null(plist,"DeviceName");
-         if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading DeviceName parameter\n");
-      }
+      return gs_error_Fatal;
    }
    else
    {
@@ -841,14 +842,14 @@
    // set Async option
    fname = deffname;
    iReturnCode = 0;
-   iReturnCode = param_read_string(plist, "async", &fname);
-   if(0 > iReturnCode)
+   iReturnCode = param_read_string (plist, "async", &fname);
+   if (0 > iReturnCode)
    {
       pDev->cAsyncOpt[0] = '\0';
       pDev->iSync = 0;
       iReturnCode = param_read_null (plist, "async");
       if (iReturnCode != 0)
-        fprintf(stderr, "Error Reading async parameter\n");
+        fprintf (stderr, "Error Reading async parameter\n");
    }
    else
    {
@@ -859,7 +860,7 @@
          memcpy (pDev->cAsyncOpt, fname.data, fname.size);
          pDev->cAsyncOpt[fname.size] = '\0';
          if (  !strcmp (pDev->cAsyncOpt, "TRUE")
-            || !strcmp(pDev->cAsyncOpt, "true")
+            || !strcmp (pDev->cAsyncOpt, "true")
             )
          {
             pDev->iSync = 1;
@@ -871,14 +872,14 @@
       }
    }
 
-   iReturnCode = param_read_long(plist,"PelSizeCorrection",&pDev->ulPelSizeCorrection);
+   iReturnCode = param_read_long (plist, "PelSizeCorrection", &pDev->ulPelSizeCorrection);
    if (0 > iReturnCode)
    {
       if (iReturnCode < 0)
       {
-         iReturnCode = param_read_null(plist,"PelSizeCorrection");
+         iReturnCode = param_read_null (plist, "PelSizeCorrection");
          if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading PelSizeCorrection parameter\n");
+            fprintf (stderr, "Error Reading PelSizeCorrection parameter\n");
       }
    }
 
@@ -886,14 +887,14 @@
     *  Set user options for the job
     */
    fname = deffname;
-   iReturnCode = param_read_string(plist,"properties",&fname);
+   iReturnCode = param_read_string (plist, "properties", &fname);
    if (0 > iReturnCode)
    {
       if (iReturnCode < 0)
       {
-         iReturnCode = param_read_null(plist,"properties");
+         iReturnCode = param_read_null (plist,"properties");
          if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading properties parameter\n");
+            fprintf (stderr, "Error Reading properties parameter\n");
       }
    }
    else
@@ -903,7 +904,7 @@
          )
       {
          if (!pDev->pcoreOmni->pszJobOptions)
-            pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc(1,fname.size+1, "Option String");
+            pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc (1, fname.size + 1, "Option String");
          memcpy (pDev->pcoreOmni->pszJobOptions, fname.data, fname.size);
          pDev->pcoreOmni->pszJobOptions[fname.size] = '\0';
       }
@@ -913,14 +914,14 @@
     *  Set user options for monodither by GS
     */
    fname = deffname;
-   iReturnCode = param_read_string(plist,"monodither",&fname);
+   iReturnCode = param_read_string (plist, "monodither", &fname);
    if (0 > iReturnCode)
    {
       if (iReturnCode < 0)
       {
-         iReturnCode = param_read_null(plist,"monodither");
+         iReturnCode = param_read_null (plist, "monodither");
          if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading monodither parameter\n");
+            fprintf (stderr, "Error Reading monodither parameter\n");
       }
    }
    else
@@ -932,9 +933,9 @@
          memcpy (pDev->cMonoDither, fname.data, fname.size);
          pDev->cMonoDither[fname.size] = '\0';
 
-         if (!strcmp(pDev->cMonoDither, "GSMONO"))
+         if (!strcmp (pDev->cMonoDither, "GSMONO"))
          {
-            if (fDebugOutput) fprintf(stderr,"turning on GSMONO dither\n");
+            if (fDebugOutput) fprintf (stderr, "turning on GSMONO dither\n");
 
             pDev->iGSMono = 1;
          }
@@ -949,15 +950,15 @@
     *  Set user options for client / server function
     */
    fname = deffname;                                                //@@05092001
-   iReturnCode = param_read_string(plist,"server",&fname);          //@@05092001
+   iReturnCode = param_read_string (plist, "server", &fname);       //@@05092001
 
    if (0 > iReturnCode)                                             //@@05092001
    {                                                                //@@05092001
       if (iReturnCode < 0)                                          //@@05092001
       {                                                             //@@05092001
-         iReturnCode = param_read_null(plist,"server");             //@@05092001
+         iReturnCode = param_read_null (plist, "server");           //@@05092001
          if (iReturnCode != 0)                                      //@@05092001
-            fprintf(stderr, "Error Reading server parameter\n");    //@@05092001
+            fprintf (stderr, "Error Reading server parameter\n");   //@@05092001
       }                                                             //@@05092001
    }                                                                //@@05092001
    else                                                             //@@05092001
@@ -967,8 +968,11 @@
          )
       {
          memcpy (pDev->pcoreOmni->cServer, fname.data, fname.size);
+
          pDev->pcoreOmni->cServer[fname.size] = '\0';
+
          fprintf (stderr, "Utilizing Server - %s \n", pDev->pcoreOmni->cServer);;
+
          pDev->iUseServer = 1;
       }
    }                                                                //@@05092001
@@ -977,23 +981,24 @@
     *  Set user options for dialog function
     */
    fname = deffname;                                                //@@05092001
-   iReturnCode = param_read_string(plist,"jobdialog",&fname);       //@@05092001
+   iReturnCode = param_read_string (plist, "jobdialog", &fname);    //@@05092001
 
    if (0 > iReturnCode)                                             //@@05092001
    {                                                                //@@05092001
       if (iReturnCode < 0)                                          //@@05092001
       {                                                             //@@05092001
-         iReturnCode = param_read_null(plist,"jobdialog");          //@@05092001
+         iReturnCode = param_read_null (plist, "jobdialog");        //@@05092001
          if (iReturnCode != 0)                                      //@@05092001
-            fprintf(stderr, "Error Reading jobdialog parameter\n"); //@@05092001
+            fprintf (stderr, "Error Reading jobdialog parameter\n");//@@05092001
       }                                                             //@@05092001
    }                                                                //@@05092001
    else                                                             //@@05092001
    {                                                                //@@05092001
       if (!iReturnCode)
       {
-         if (fDebugOutput) fprintf(stderr, "Utilizing dialog\n");
-            pDev->iUseDialog = 1;
+         if (fDebugOutput) fprintf (stderr, "Utilizing dialog\n");
+
+         pDev->iUseDialog = 1;
       }
    }                                                                //@@05092001
 
@@ -1002,10 +1007,10 @@
       // create a device based on the user supplied inputs
       // To-Do - free the device
 
-      if (fDebugOutput) fprintf(stderr,"setting following options on CreateDevice\n");
-      if (fDebugOutput) fprintf(stderr,"DeviceName = %s\n", pDev->pcoreOmni->cDeviceName );
-      if (fDebugOutput) fprintf(stderr,"pszJobOptions = %s\n", pDev->pcoreOmni->pszJobOptions);
-      if (fDebugOutput) fprintf(stderr,"debug parameter = %s \n", pDev->pcoreOmni->cDebugFile );
+      if (fDebugOutput) fprintf(stderr, "setting following options on CreateDevice\n");
+      if (fDebugOutput) fprintf(stderr, "DeviceName = %s\n", pDev->pcoreOmni->cDeviceName );
+      if (fDebugOutput) fprintf(stderr, "pszJobOptions = %s\n", pDev->pcoreOmni->pszJobOptions);
+      if (fDebugOutput) fprintf(stderr, "debug parameter = %s \n", pDev->pcoreOmni->cDebugFile );
 
       /*
        *  Create a device definition by using the input parameters as the
@@ -1018,9 +1023,7 @@
          return bRet;
       }
 
-      if (  !pDev->pcoreOmni->pszJobOptions
-         && pDev->iUseDialog
-         )
+      if (pDev->iUseDialog)
       {
          int                       iLength                  = 0;
          char                     *pszSelectedJobProperties;
@@ -1050,7 +1053,7 @@
 
          if (!pModule)
          {
-            fprintf(stderr, "Unable to open <<%s>>.", cDialogName);
+            fprintf (stderr, "Unable to open <<%s>>.", cDialogName);
          }
          else
          {
@@ -1058,24 +1061,31 @@
 
             if (pfnJobDialog)
             {
-               pfnJobDialog(pDev->pcoreOmni->cDeviceName, &pszSelectedJobProperties);
+               pszSelectedJobProperties = pDev->pcoreOmni->pszJobOptions;
+
+               pfnJobDialog (pDev->pcoreOmni->cDeviceName, &pszSelectedJobProperties);
+
+               if (pDev->pcoreOmni->pszJobOptions)
+               {
+                  gs_free (pDev->pcoreOmni->pszJobOptions, strlen (pDev->pcoreOmni->pszJobOptions) + 1, 1, "Option String");
+                  pDev->pcoreOmni->pszJobOptions = 0;
+               }
 
-               iLength = strlen(pszSelectedJobProperties);
+               iLength = strlen (pszSelectedJobProperties);
 
-               if (!pDev->pcoreOmni->pszJobOptions)
-                  pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc(1, iLength + 1, "Option String");
+               pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc (1, iLength + 1, "Option String");
 
                strcpy (pDev->pcoreOmni->pszJobOptions, pszSelectedJobProperties);
 
-               if (fDebugOutput) fprintf(stderr, "options = %s\n", pDev->pcoreOmni->pszJobOptions);
+               if (fDebugOutput) fprintf (stderr, "options = %s\n", pDev->pcoreOmni->pszJobOptions);
 
-               g_module_symbol(pModule, "FreeOmniJobProperties", (gpointer *)&pfnFreeDialogMemory);
+               g_module_symbol (pModule, "FreeOmniJobProperties", (gpointer *)&pfnFreeDialogMemory);
 
                if (pfnFreeDialogMemory)
                {
                   pfnFreeDialogMemory (&pszSelectedJobProperties);
 
-                  if (fDebugOutput) fprintf(stderr, "Freeing Dialog Memory\n");
+                  if (fDebugOutput) fprintf (stderr, "Freeing Dialog Memory\n");
                }
             }
          }
@@ -1118,9 +1128,9 @@
 
       bRet = pDev->pfnGetPrintModeInfo ((void*)pDev->pCallPtr, &prtMode);
 
-      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo returns %d\n",bRet);
-      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iBitCount = %d\n",prtMode.iBitCount);
-      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iPlanes = %d\n",prtMode.iPlanes);
+      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo returns %d\n", bRet);
+      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iBitCount = %d\n", prtMode.iBitCount);
+      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iPlanes = %d\n", prtMode.iPlanes);
 
       if (bRet)
       {
@@ -1141,7 +1151,7 @@
       bRet = pDev->pfnGetResolutionInfo ((void*)pDev->pCallPtr, &hwRes);
 
       if (!bRet)
-         return_error(gs_error_Fatal);
+         return_error (gs_error_Fatal);
 
       // get the hardware page margins information
 
@@ -1156,7 +1166,7 @@
       if (fDebugOutput) fprintf (stderr, "GetMarginInfo.fyHeight = %f\n", hwMargins.fyHeight);
 
       if (!bRet)
-         return_error(gs_error_Fatal);
+         return_error (gs_error_Fatal);
 
       /*
        *  We have to let GS know about our page and resolution parameters
@@ -1170,40 +1180,40 @@
       // using points instead
 
       // left margin
-      prgxdev->HWMargins[0] = (float) hwMargins.fLeftClip/25400.0 *72.0;           //@@05092001A
+      prgxdev->HWMargins[0] = (float)hwMargins.fLeftClip/25400.0 *72.0;           //@@05092001A
 
       // bottom margin
-      prgxdev->HWMargins[1] = (float) hwMargins.fBottomClip/25400.0 *72.0;         //@@05092001A
+      prgxdev->HWMargins[1] = (float)hwMargins.fBottomClip/25400.0 *72.0;         //@@05092001A
 
       // right margin
-      prgxdev->HWMargins[2] = (float) hwMargins.fRightClip/25400.0 *72.0;          //@@05092001A
+      prgxdev->HWMargins[2] = (float)hwMargins.fRightClip/25400.0 *72.0;          //@@05092001A
 
       // top margin
-      prgxdev->HWMargins[3] = (float) hwMargins.fTopClip/25400.0 *72.0;            //@@05092001A
+      prgxdev->HWMargins[3] = (float)hwMargins.fTopClip/25400.0 *72.0;            //@@05092001A
 
       // set x resolution
-      prgxdev->HWResolution[0] = (float) hwRes.xRes;
+      prgxdev->HWResolution[0] = (float)hwRes.xRes;
 
       // set y resolution
-      prgxdev->HWResolution[1] = (float) hwRes.yRes;
+      prgxdev->HWResolution[1] = (float)hwRes.yRes;
 
-      prgxdev->pDev->iVertDots = (float) hwRes.fScanDots;  // fill in the scan line
+      prgxdev->pDev->iVertDots = (float)hwRes.fScanDots;  // fill in the scan line
 
-      if (fDebugOutput) fprintf(stderr, "left margin pts   = %f \n", prgxdev->HWMargins[0]);    //@@05092001A
-      if (fDebugOutput) fprintf(stderr, "bottom margin pts = %f \n", prgxdev->HWMargins[1]);    //@@05092001A
-      if (fDebugOutput) fprintf(stderr, "right margin pts  = %f \n", prgxdev->HWMargins[2]);    //@@05092001A
-      if (fDebugOutput) fprintf(stderr, "top margin pts    = %f \n", prgxdev->HWMargins[3]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "left margin pts   = %f \n", prgxdev->HWMargins[0]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "bottom margin pts = %f \n", prgxdev->HWMargins[1]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "right margin pts  = %f \n", prgxdev->HWMargins[2]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "top margin pts    = %f \n", prgxdev->HWMargins[3]);    //@@05092001A
 
       if (!pDev->iGSMono)
       {
          // 1,1,1,0,2,0       - mono  //@@04252001
          // 3, 24,255,255,5,5 - color //@@04252001
-         if (fDebugOutput) fprintf(stderr, "depth = %d \n", prgxdev->color_info.depth              );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "num_comp = %d \n", prgxdev->color_info.num_components  );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "max_gray = %d \n", prgxdev->color_info.max_gray        );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "max_color = %d \n", prgxdev->color_info.max_color      );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "dither_grays = %d \n", prgxdev->color_info.dither_grays   );//@@04252001
-         if (fDebugOutput) fprintf(stderr, "dither_colors = %d \n", prgxdev->color_info.dither_colors );//@@04252001
+         if (fDebugOutput) fprintf (stderr, "depth = %d \n", prgxdev->color_info.depth              );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "num_comp = %d \n", prgxdev->color_info.num_components  );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "max_gray = %d \n", prgxdev->color_info.max_gray        );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "max_color = %d \n", prgxdev->color_info.max_color      );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "dither_grays = %d \n", prgxdev->color_info.dither_grays   );//@@04252001
+         if (fDebugOutput) fprintf (stderr, "dither_colors = %d \n", prgxdev->color_info.dither_colors );//@@04252001
                                                                                                         //@@04252001
          prgxdev->color_info.depth          = 24;                                                      //@@04252001
          prgxdev->color_info.num_components = 3;                                                       //@@04252001
@@ -1214,13 +1224,13 @@
       }
    }
 
-   iReturnCode = gdev_prn_put_params((gx_device *)prgxdev, plist);
+   iReturnCode = gdev_prn_put_params ((gx_device *)prgxdev, plist);
 
    return iReturnCode;  // likely not be a failure
 }
 
 private int
-omni_print_page(gx_device_printer *pdev, FILE *prn_stream)
+omni_print_page (gx_device_printer *pdev, FILE *prn_stream)
 {
    return PrintPage (pdev, prn_stream, 1);
 }
@@ -1285,7 +1295,7 @@
       fprintf (stderr, "\n<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n\n");
       fprintf (stderr, "Error: -sDeviceName=XXX is not specified!\n\n");
 
-      return_error(gs_error_Fatal);
+      return_error (gs_error_Fatal);
    }
 
    pDev->iPage++;
@@ -1303,12 +1313,12 @@
    }
 
    pbmi = (PBITMAPINFO2)gs_malloc (1, iBytesToAlloc, "Bmpi Memory");
-   if(!pbmi)
+   if (!pbmi)
    {
       fprintf(stderr, "<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n");
       fprintf(stderr, "   Failed allocation of pbmi in PrintPage\n");
 
-      return_error(gs_error_VMerror);
+      return_error (gs_error_VMerror);
    }
 
    pbmi->cbFix = sizeof(BITMAPINFO2); /* Length of fixed portion of structure?? */
--- ghostscript-7.04-030402/src/gomni.c	Tue Apr 16 15:43:48 2002
+++ ghostscript-7.04-041602/src/gomni.c	Tue Apr 16 15:43:49 2002
@@ -463,7 +463,7 @@
 
    if (pDev->pcoreOmni->pszJobOptions)
    {
-      gs_free (pDev->pcoreOmni->pszJobOptions,strlen(pDev->pcoreOmni->pszJobOptions)+1, 1, "Option String");
+      gs_free (pDev->pcoreOmni->pszJobOptions, strlen (pDev->pcoreOmni->pszJobOptions) + 1, 1, "Option String");
    }
 
    if (pDev->pfnGITerm)
@@ -554,7 +554,7 @@
       && pDev->pcoreOmni->pszJobOptions
       )
    {
-      strdata.size = strlen(pszOther);
+      strdata.size = strlen (pszOther);
       strdata.data = pszOther;
    }
    else
@@ -634,6 +634,8 @@
    deffname.size       = 0;
    deffname.persistent = false;
 
+   if (fDebugOutput) fprintf (stderr, "SetupDevice: pDev = %08X\n", pDev);
+
    if (pDev == NULL)
    {
       PDEVSTRUCT p;
@@ -641,15 +643,16 @@
       p = (PDEVSTRUCT)gs_malloc (1, sizeof (Omni_Dev), "omni/instance");
       if (!p)
       {
-          fprintf(stderr, "<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n");
-          fprintf(stderr, "   Failed allocation of p in SetupDevice\n");
-          return_error(gs_error_VMerror);
+          fprintf (stderr, "<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n");
+          fprintf (stderr, "   Failed allocation of p in SetupDevice\n");
+
+          return_error (gs_error_VMerror);
       }
       prgxdev->pDev = p;
 
       if (!(pDev = prgxdev->pDev))
       {
-         return_error(gs_error_Fatal);
+         return_error (gs_error_Fatal);
       }
       else
       {
@@ -684,7 +687,7 @@
               sprintf (pszDeviceLib, "%s%s", apszLibraryPaths[i], cOmnilib);
               pDev->hmodOmni = g_module_open (pszDeviceLib, (GModuleFlags)0);
           }
-          gs_free (pszDeviceLib,strlen(pszDeviceLib)+1, 1, "Devicestring");
+          gs_free (pszDeviceLib, strlen (pszDeviceLib) + 1, 1, "Devicestring");
       }
 
       if (!pDev->hmodOmni)
@@ -791,16 +794,14 @@
    // device name in structure - need to fail if none
    fname = deffname;
    iReturnCode = param_read_string (plist, "DeviceName", &fname);
-   if (0 > iReturnCode)
+   if (fDebugOutput) fprintf (stderr,"param_read_string of DeviceName = %d\n", iReturnCode);
+   if (  0 < iReturnCode
+      && !pDev->pcoreOmni->cDeviceName[0]
+      )
    {
-      pDev->pcoreOmni->cDeviceName[0] = '\0';
+      fprintf (stderr, "Error: -sDeviceName=XXX must be on the command line!\n");
 
-      if (iReturnCode < 0)
-      {
-         iReturnCode = param_read_null(plist,"DeviceName");
-         if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading DeviceName parameter\n");
-      }
+      return gs_error_Fatal;
    }
    else
    {
@@ -841,14 +842,14 @@
    // set Async option
    fname = deffname;
    iReturnCode = 0;
-   iReturnCode = param_read_string(plist, "async", &fname);
-   if(0 > iReturnCode)
+   iReturnCode = param_read_string (plist, "async", &fname);
+   if (0 > iReturnCode)
    {
       pDev->cAsyncOpt[0] = '\0';
       pDev->iSync = 0;
       iReturnCode = param_read_null (plist, "async");
       if (iReturnCode != 0)
-        fprintf(stderr, "Error Reading async parameter\n");
+        fprintf (stderr, "Error Reading async parameter\n");
    }
    else
    {
@@ -859,7 +860,7 @@
          memcpy (pDev->cAsyncOpt, fname.data, fname.size);
          pDev->cAsyncOpt[fname.size] = '\0';
          if (  !strcmp (pDev->cAsyncOpt, "TRUE")
-            || !strcmp(pDev->cAsyncOpt, "true")
+            || !strcmp (pDev->cAsyncOpt, "true")
             )
          {
             pDev->iSync = 1;
@@ -871,14 +872,14 @@
       }
    }
 
-   iReturnCode = param_read_long(plist,"PelSizeCorrection",&pDev->ulPelSizeCorrection);
+   iReturnCode = param_read_long (plist, "PelSizeCorrection", &pDev->ulPelSizeCorrection);
    if (0 > iReturnCode)
    {
       if (iReturnCode < 0)
       {
-         iReturnCode = param_read_null(plist,"PelSizeCorrection");
+         iReturnCode = param_read_null (plist, "PelSizeCorrection");
          if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading PelSizeCorrection parameter\n");
+            fprintf (stderr, "Error Reading PelSizeCorrection parameter\n");
       }
    }
 
@@ -886,14 +887,14 @@
     *  Set user options for the job
     */
    fname = deffname;
-   iReturnCode = param_read_string(plist,"properties",&fname);
+   iReturnCode = param_read_string (plist, "properties", &fname);
    if (0 > iReturnCode)
    {
       if (iReturnCode < 0)
       {
-         iReturnCode = param_read_null(plist,"properties");
+         iReturnCode = param_read_null (plist,"properties");
          if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading properties parameter\n");
+            fprintf (stderr, "Error Reading properties parameter\n");
       }
    }
    else
@@ -903,7 +904,7 @@
          )
       {
          if (!pDev->pcoreOmni->pszJobOptions)
-            pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc(1,fname.size+1, "Option String");
+            pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc (1, fname.size + 1, "Option String");
          memcpy (pDev->pcoreOmni->pszJobOptions, fname.data, fname.size);
          pDev->pcoreOmni->pszJobOptions[fname.size] = '\0';
       }
@@ -913,14 +914,14 @@
     *  Set user options for monodither by GS
     */
    fname = deffname;
-   iReturnCode = param_read_string(plist,"monodither",&fname);
+   iReturnCode = param_read_string (plist, "monodither", &fname);
    if (0 > iReturnCode)
    {
       if (iReturnCode < 0)
       {
-         iReturnCode = param_read_null(plist,"monodither");
+         iReturnCode = param_read_null (plist, "monodither");
          if (iReturnCode != 0)
-            fprintf(stderr, "Error Reading monodither parameter\n");
+            fprintf (stderr, "Error Reading monodither parameter\n");
       }
    }
    else
@@ -932,9 +933,9 @@
          memcpy (pDev->cMonoDither, fname.data, fname.size);
          pDev->cMonoDither[fname.size] = '\0';
 
-         if (!strcmp(pDev->cMonoDither, "GSMONO"))
+         if (!strcmp (pDev->cMonoDither, "GSMONO"))
          {
-            if (fDebugOutput) fprintf(stderr,"turning on GSMONO dither\n");
+            if (fDebugOutput) fprintf (stderr, "turning on GSMONO dither\n");
 
             pDev->iGSMono = 1;
          }
@@ -949,15 +950,15 @@
     *  Set user options for client / server function
     */
    fname = deffname;                                                //@@05092001
-   iReturnCode = param_read_string(plist,"server",&fname);          //@@05092001
+   iReturnCode = param_read_string (plist, "server", &fname);       //@@05092001
 
    if (0 > iReturnCode)                                             //@@05092001
    {                                                                //@@05092001
       if (iReturnCode < 0)                                          //@@05092001
       {                                                             //@@05092001
-         iReturnCode = param_read_null(plist,"server");             //@@05092001
+         iReturnCode = param_read_null (plist, "server");           //@@05092001
          if (iReturnCode != 0)                                      //@@05092001
-            fprintf(stderr, "Error Reading server parameter\n");    //@@05092001
+            fprintf (stderr, "Error Reading server parameter\n");   //@@05092001
       }                                                             //@@05092001
    }                                                                //@@05092001
    else                                                             //@@05092001
@@ -967,8 +968,11 @@
          )
       {
          memcpy (pDev->pcoreOmni->cServer, fname.data, fname.size);
+
          pDev->pcoreOmni->cServer[fname.size] = '\0';
+
          fprintf (stderr, "Utilizing Server - %s \n", pDev->pcoreOmni->cServer);;
+
          pDev->iUseServer = 1;
       }
    }                                                                //@@05092001
@@ -977,23 +981,24 @@
     *  Set user options for dialog function
     */
    fname = deffname;                                                //@@05092001
-   iReturnCode = param_read_string(plist,"jobdialog",&fname);       //@@05092001
+   iReturnCode = param_read_string (plist, "jobdialog", &fname);    //@@05092001
 
    if (0 > iReturnCode)                                             //@@05092001
    {                                                                //@@05092001
       if (iReturnCode < 0)                                          //@@05092001
       {                                                             //@@05092001
-         iReturnCode = param_read_null(plist,"jobdialog");          //@@05092001
+         iReturnCode = param_read_null (plist, "jobdialog");        //@@05092001
          if (iReturnCode != 0)                                      //@@05092001
-            fprintf(stderr, "Error Reading jobdialog parameter\n"); //@@05092001
+            fprintf (stderr, "Error Reading jobdialog parameter\n");//@@05092001
       }                                                             //@@05092001
    }                                                                //@@05092001
    else                                                             //@@05092001
    {                                                                //@@05092001
       if (!iReturnCode)
       {
-         if (fDebugOutput) fprintf(stderr, "Utilizing dialog\n");
-            pDev->iUseDialog = 1;
+         if (fDebugOutput) fprintf (stderr, "Utilizing dialog\n");
+
+         pDev->iUseDialog = 1;
       }
    }                                                                //@@05092001
 
@@ -1002,10 +1007,10 @@
       // create a device based on the user supplied inputs
       // To-Do - free the device
 
-      if (fDebugOutput) fprintf(stderr,"setting following options on CreateDevice\n");
-      if (fDebugOutput) fprintf(stderr,"DeviceName = %s\n", pDev->pcoreOmni->cDeviceName );
-      if (fDebugOutput) fprintf(stderr,"pszJobOptions = %s\n", pDev->pcoreOmni->pszJobOptions);
-      if (fDebugOutput) fprintf(stderr,"debug parameter = %s \n", pDev->pcoreOmni->cDebugFile );
+      if (fDebugOutput) fprintf(stderr, "setting following options on CreateDevice\n");
+      if (fDebugOutput) fprintf(stderr, "DeviceName = %s\n", pDev->pcoreOmni->cDeviceName );
+      if (fDebugOutput) fprintf(stderr, "pszJobOptions = %s\n", pDev->pcoreOmni->pszJobOptions);
+      if (fDebugOutput) fprintf(stderr, "debug parameter = %s \n", pDev->pcoreOmni->cDebugFile );
 
       /*
        *  Create a device definition by using the input parameters as the
@@ -1018,9 +1023,7 @@
          return bRet;
       }
 
-      if (  !pDev->pcoreOmni->pszJobOptions
-         && pDev->iUseDialog
-         )
+      if (pDev->iUseDialog)
       {
          int                       iLength                  = 0;
          char                     *pszSelectedJobProperties;
@@ -1050,7 +1053,7 @@
 
          if (!pModule)
          {
-            fprintf(stderr, "Unable to open <<%s>>.", cDialogName);
+            fprintf (stderr, "Unable to open <<%s>>.", cDialogName);
          }
          else
          {
@@ -1058,24 +1061,31 @@
 
             if (pfnJobDialog)
             {
-               pfnJobDialog(pDev->pcoreOmni->cDeviceName, &pszSelectedJobProperties);
+               pszSelectedJobProperties = pDev->pcoreOmni->pszJobOptions;
+
+               pfnJobDialog (pDev->pcoreOmni->cDeviceName, &pszSelectedJobProperties);
+
+               if (pDev->pcoreOmni->pszJobOptions)
+               {
+                  gs_free (pDev->pcoreOmni->pszJobOptions, strlen (pDev->pcoreOmni->pszJobOptions) + 1, 1, "Option String");
+                  pDev->pcoreOmni->pszJobOptions = 0;
+               }
 
-               iLength = strlen(pszSelectedJobProperties);
+               iLength = strlen (pszSelectedJobProperties);
 
-               if (!pDev->pcoreOmni->pszJobOptions)
-                  pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc(1, iLength + 1, "Option String");
+               pDev->pcoreOmni->pszJobOptions = (char *)gs_malloc (1, iLength + 1, "Option String");
 
                strcpy (pDev->pcoreOmni->pszJobOptions, pszSelectedJobProperties);
 
-               if (fDebugOutput) fprintf(stderr, "options = %s\n", pDev->pcoreOmni->pszJobOptions);
+               if (fDebugOutput) fprintf (stderr, "options = %s\n", pDev->pcoreOmni->pszJobOptions);
 
-               g_module_symbol(pModule, "FreeOmniJobProperties", (gpointer *)&pfnFreeDialogMemory);
+               g_module_symbol (pModule, "FreeOmniJobProperties", (gpointer *)&pfnFreeDialogMemory);
 
                if (pfnFreeDialogMemory)
                {
                   pfnFreeDialogMemory (&pszSelectedJobProperties);
 
-                  if (fDebugOutput) fprintf(stderr, "Freeing Dialog Memory\n");
+                  if (fDebugOutput) fprintf (stderr, "Freeing Dialog Memory\n");
                }
             }
          }
@@ -1118,9 +1128,9 @@
 
       bRet = pDev->pfnGetPrintModeInfo ((void*)pDev->pCallPtr, &prtMode);
 
-      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo returns %d\n",bRet);
-      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iBitCount = %d\n",prtMode.iBitCount);
-      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iPlanes = %d\n",prtMode.iPlanes);
+      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo returns %d\n", bRet);
+      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iBitCount = %d\n", prtMode.iBitCount);
+      if (fDebugOutput) fprintf(stderr, "GetPrintModeInfo.iPlanes = %d\n", prtMode.iPlanes);
 
       if (bRet)
       {
@@ -1141,7 +1151,7 @@
       bRet = pDev->pfnGetResolutionInfo ((void*)pDev->pCallPtr, &hwRes);
 
       if (!bRet)
-         return_error(gs_error_Fatal);
+         return_error (gs_error_Fatal);
 
       // get the hardware page margins information
 
@@ -1156,7 +1166,7 @@
       if (fDebugOutput) fprintf (stderr, "GetMarginInfo.fyHeight = %f\n", hwMargins.fyHeight);
 
       if (!bRet)
-         return_error(gs_error_Fatal);
+         return_error (gs_error_Fatal);
 
       /*
        *  We have to let GS know about our page and resolution parameters
@@ -1170,40 +1180,40 @@
       // using points instead
 
       // left margin
-      prgxdev->HWMargins[0] = (float) hwMargins.fLeftClip/25400.0 *72.0;           //@@05092001A
+      prgxdev->HWMargins[0] = (float)hwMargins.fLeftClip/25400.0 *72.0;           //@@05092001A
 
       // bottom margin
-      prgxdev->HWMargins[1] = (float) hwMargins.fBottomClip/25400.0 *72.0;         //@@05092001A
+      prgxdev->HWMargins[1] = (float)hwMargins.fBottomClip/25400.0 *72.0;         //@@05092001A
 
       // right margin
-      prgxdev->HWMargins[2] = (float) hwMargins.fRightClip/25400.0 *72.0;          //@@05092001A
+      prgxdev->HWMargins[2] = (float)hwMargins.fRightClip/25400.0 *72.0;          //@@05092001A
 
       // top margin
-      prgxdev->HWMargins[3] = (float) hwMargins.fTopClip/25400.0 *72.0;            //@@05092001A
+      prgxdev->HWMargins[3] = (float)hwMargins.fTopClip/25400.0 *72.0;            //@@05092001A
 
       // set x resolution
-      prgxdev->HWResolution[0] = (float) hwRes.xRes;
+      prgxdev->HWResolution[0] = (float)hwRes.xRes;
 
       // set y resolution
-      prgxdev->HWResolution[1] = (float) hwRes.yRes;
+      prgxdev->HWResolution[1] = (float)hwRes.yRes;
 
-      prgxdev->pDev->iVertDots = (float) hwRes.fScanDots;  // fill in the scan line
+      prgxdev->pDev->iVertDots = (float)hwRes.fScanDots;  // fill in the scan line
 
-      if (fDebugOutput) fprintf(stderr, "left margin pts   = %f \n", prgxdev->HWMargins[0]);    //@@05092001A
-      if (fDebugOutput) fprintf(stderr, "bottom margin pts = %f \n", prgxdev->HWMargins[1]);    //@@05092001A
-      if (fDebugOutput) fprintf(stderr, "right margin pts  = %f \n", prgxdev->HWMargins[2]);    //@@05092001A
-      if (fDebugOutput) fprintf(stderr, "top margin pts    = %f \n", prgxdev->HWMargins[3]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "left margin pts   = %f \n", prgxdev->HWMargins[0]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "bottom margin pts = %f \n", prgxdev->HWMargins[1]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "right margin pts  = %f \n", prgxdev->HWMargins[2]);    //@@05092001A
+      if (fDebugOutput) fprintf (stderr, "top margin pts    = %f \n", prgxdev->HWMargins[3]);    //@@05092001A
 
       if (!pDev->iGSMono)
       {
          // 1,1,1,0,2,0       - mono  //@@04252001
          // 3, 24,255,255,5,5 - color //@@04252001
-         if (fDebugOutput) fprintf(stderr, "depth = %d \n", prgxdev->color_info.depth              );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "num_comp = %d \n", prgxdev->color_info.num_components  );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "max_gray = %d \n", prgxdev->color_info.max_gray        );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "max_color = %d \n", prgxdev->color_info.max_color      );   //@@04252001
-         if (fDebugOutput) fprintf(stderr, "dither_grays = %d \n", prgxdev->color_info.dither_grays   );//@@04252001
-         if (fDebugOutput) fprintf(stderr, "dither_colors = %d \n", prgxdev->color_info.dither_colors );//@@04252001
+         if (fDebugOutput) fprintf (stderr, "depth = %d \n", prgxdev->color_info.depth              );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "num_comp = %d \n", prgxdev->color_info.num_components  );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "max_gray = %d \n", prgxdev->color_info.max_gray        );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "max_color = %d \n", prgxdev->color_info.max_color      );   //@@04252001
+         if (fDebugOutput) fprintf (stderr, "dither_grays = %d \n", prgxdev->color_info.dither_grays   );//@@04252001
+         if (fDebugOutput) fprintf (stderr, "dither_colors = %d \n", prgxdev->color_info.dither_colors );//@@04252001
                                                                                                         //@@04252001
          prgxdev->color_info.depth          = 24;                                                      //@@04252001
          prgxdev->color_info.num_components = 3;                                                       //@@04252001
@@ -1214,13 +1224,13 @@
       }
    }
 
-   iReturnCode = gdev_prn_put_params((gx_device *)prgxdev, plist);
+   iReturnCode = gdev_prn_put_params ((gx_device *)prgxdev, plist);
 
    return iReturnCode;  // likely not be a failure
 }
 
 private int
-omni_print_page(gx_device_printer *pdev, FILE *prn_stream)
+omni_print_page (gx_device_printer *pdev, FILE *prn_stream)
 {
    return PrintPage (pdev, prn_stream, 1);
 }
@@ -1285,7 +1295,7 @@
       fprintf (stderr, "\n<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n\n");
       fprintf (stderr, "Error: -sDeviceName=XXX is not specified!\n\n");
 
-      return_error(gs_error_Fatal);
+      return_error (gs_error_Fatal);
    }
 
    pDev->iPage++;
@@ -1303,12 +1313,12 @@
    }
 
    pbmi = (PBITMAPINFO2)gs_malloc (1, iBytesToAlloc, "Bmpi Memory");
-   if(!pbmi)
+   if (!pbmi)
    {
       fprintf(stderr, "<<<<<<<<<<<<<<<<<<<<<< ERROR >>>>>>>>>>>>>>>>>>>>>>>\n");
       fprintf(stderr, "   Failed allocation of pbmi in PrintPage\n");
 
-      return_error(gs_error_VMerror);
+      return_error (gs_error_VMerror);
    }
 
    pbmi->cbFix = sizeof(BITMAPINFO2); /* Length of fixed portion of structure?? */
